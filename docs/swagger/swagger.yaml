openapi: 3.1.0
info:
  title: Cart API
  description: Cart API
  version: 1.0.0
servers:
  - url: 'http://localhost:3000/api/v1'
components:
  schemas:
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Pizza"
        price:
          type: integer
          example: 150.99

    ProductWithCountDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Pizza"
        price:
          type: integer
          example: 150.99
        count:
          type: integer
          example: 99
          description: "Количество товара на складе"

    StatusDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Issue"
          description: "Предусмотрено 4 статуса: Issued, Paid, Sent, Delivered"

    CartDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        in_cart:
          type: array
          items:
            type: object
            properties:
              quantity:
                type: integer
                example: 20
              product:
                $ref: "#/components/schemas/ProductWithCountDTO"

    OrderDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        status:
          $ref: "#/components/schemas/StatusDTO"
        in_cart:
          type: array
          items:
            type: object
            properties:
              quantity:
                type: integer
                example: 20
              product:
                $ref: "#/components/schemas/ProductDTO"



  responses:
    serverError:
      description: "Server error"
      content:
        application/json:
          schema:
            properties:
              error:
                type: string

    validError:
      description: "Validation error"
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
              errors:
                type: array


    urlError:
      description: "Url error"
      content:
        application/json:
          schema:
            properties:
              error:
                type: string


    badRequest:
      description: "Bad request"
      content:
        application/json:
          schema:
            properties:
              error:
                type: object


    notFound:
      description: "Not found"
      content:
        application/json:
          schema:
            properties:
              error:
                type: string







paths:
  /products:
    get:
      summary: "Возвращает коллекцию товаров"
      responses:
        "200":
          description: "Коллекция товаров"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDTO"
        "500":
          description: "Ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/serverError"
  /statuses:
    get:
      summary: "Возвращает коллекцию доступных статусов"
      responses:
        "200":
          description: "Коллекция статусов"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusDTO"
        "500":
          description: "Ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/serverError"
  /cart/view:
    get:
      summary: "Просмотр текущей корзины"
      responses:
        "200":
          description: "Возвращает данные о корзине с продуктами"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartDTO"
        "500":
          description: "Ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/serverError"

  /cart/product:
    post:
      summary: "Добавление товара в корзину"
      operationId: "AddProductToCart"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
      responses:
        "200":
          description: "Добавление товара в корзину"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartDTO"
        "404":
          description: "Выбранный товар не существует"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/notFound"
        "500":
          description: "Ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/serverError"
  /cart/product/{id}:
    delete:
      summary: "Добавление товара в корзину"
      operationId: "RemoveProductFromCart"
      parameters:
        - name: id
          in: path
          description: "Ид товара"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Добавление товара в корзину"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartDTO"

  /orders:
    get:
      summary: "Просмотр всех созданных заказов"
      responses:
        "200":
          description: "Возвращает коллекцию со всеми заказами"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
        "500":
          description: "Ошибка сервера"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/serverError"
    post:
      summary: "Создание заказа"
      responses:
        "200":
          description: "Возвращает созданный заказ на основе текущей корзины"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
        "400":
          description: "Если корзина пустая, то заказ не будет создан"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/badRequest"

  /orders/{id}:
    put:
      summary: "Обновление статуса заказа"
      operationId: "UpdateStatusOrder"
      parameters:
        - name: id
          in: path
          description: "Ид заказа"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status_id:
                  type: integer
      responses:
        "200":
          description: "Обновленный заказ"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"








